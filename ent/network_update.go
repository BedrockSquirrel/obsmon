// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bedrocksquirrel/obsmon/ent/environment"
	"github.com/bedrocksquirrel/obsmon/ent/network"
	"github.com/bedrocksquirrel/obsmon/ent/node"
	"github.com/bedrocksquirrel/obsmon/ent/predicate"
)

// NetworkUpdate is the builder for updating Network entities.
type NetworkUpdate struct {
	config
	hooks    []Hook
	mutation *NetworkMutation
}

// Where appends a list predicates to the NetworkUpdate builder.
func (nu *NetworkUpdate) Where(ps ...predicate.Network) *NetworkUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetDeployTime sets the "deployTime" field.
func (nu *NetworkUpdate) SetDeployTime(t time.Time) *NetworkUpdate {
	nu.mutation.SetDeployTime(t)
	return nu
}

// SetGithubBuildNum sets the "githubBuildNum" field.
func (nu *NetworkUpdate) SetGithubBuildNum(i int) *NetworkUpdate {
	nu.mutation.ResetGithubBuildNum()
	nu.mutation.SetGithubBuildNum(i)
	return nu
}

// AddGithubBuildNum adds i to the "githubBuildNum" field.
func (nu *NetworkUpdate) AddGithubBuildNum(i int) *NetworkUpdate {
	nu.mutation.AddGithubBuildNum(i)
	return nu
}

// SetEnvironmentID sets the "environment" edge to the Environment entity by ID.
func (nu *NetworkUpdate) SetEnvironmentID(id int) *NetworkUpdate {
	nu.mutation.SetEnvironmentID(id)
	return nu
}

// SetNillableEnvironmentID sets the "environment" edge to the Environment entity by ID if the given value is not nil.
func (nu *NetworkUpdate) SetNillableEnvironmentID(id *int) *NetworkUpdate {
	if id != nil {
		nu = nu.SetEnvironmentID(*id)
	}
	return nu
}

// SetEnvironment sets the "environment" edge to the Environment entity.
func (nu *NetworkUpdate) SetEnvironment(e *Environment) *NetworkUpdate {
	return nu.SetEnvironmentID(e.ID)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (nu *NetworkUpdate) AddNodeIDs(ids ...int) *NetworkUpdate {
	nu.mutation.AddNodeIDs(ids...)
	return nu
}

// AddNodes adds the "nodes" edges to the Node entity.
func (nu *NetworkUpdate) AddNodes(n ...*Node) *NetworkUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.AddNodeIDs(ids...)
}

// Mutation returns the NetworkMutation object of the builder.
func (nu *NetworkUpdate) Mutation() *NetworkMutation {
	return nu.mutation
}

// ClearEnvironment clears the "environment" edge to the Environment entity.
func (nu *NetworkUpdate) ClearEnvironment() *NetworkUpdate {
	nu.mutation.ClearEnvironment()
	return nu
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (nu *NetworkUpdate) ClearNodes() *NetworkUpdate {
	nu.mutation.ClearNodes()
	return nu
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (nu *NetworkUpdate) RemoveNodeIDs(ids ...int) *NetworkUpdate {
	nu.mutation.RemoveNodeIDs(ids...)
	return nu
}

// RemoveNodes removes "nodes" edges to Node entities.
func (nu *NetworkUpdate) RemoveNodes(n ...*Node) *NetworkUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.RemoveNodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NetworkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NetworkUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NetworkUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NetworkUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nu *NetworkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(network.Table, network.Columns, sqlgraph.NewFieldSpec(network.FieldID, field.TypeInt))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.DeployTime(); ok {
		_spec.SetField(network.FieldDeployTime, field.TypeTime, value)
	}
	if value, ok := nu.mutation.GithubBuildNum(); ok {
		_spec.SetField(network.FieldGithubBuildNum, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedGithubBuildNum(); ok {
		_spec.AddField(network.FieldGithubBuildNum, field.TypeInt, value)
	}
	if nu.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   network.EnvironmentTable,
			Columns: []string{network.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   network.EnvironmentTable,
			Columns: []string{network.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   network.NodesTable,
			Columns: []string{network.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNodesIDs(); len(nodes) > 0 && !nu.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   network.NodesTable,
			Columns: []string{network.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   network.NodesTable,
			Columns: []string{network.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{network.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NetworkUpdateOne is the builder for updating a single Network entity.
type NetworkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NetworkMutation
}

// SetDeployTime sets the "deployTime" field.
func (nuo *NetworkUpdateOne) SetDeployTime(t time.Time) *NetworkUpdateOne {
	nuo.mutation.SetDeployTime(t)
	return nuo
}

// SetGithubBuildNum sets the "githubBuildNum" field.
func (nuo *NetworkUpdateOne) SetGithubBuildNum(i int) *NetworkUpdateOne {
	nuo.mutation.ResetGithubBuildNum()
	nuo.mutation.SetGithubBuildNum(i)
	return nuo
}

// AddGithubBuildNum adds i to the "githubBuildNum" field.
func (nuo *NetworkUpdateOne) AddGithubBuildNum(i int) *NetworkUpdateOne {
	nuo.mutation.AddGithubBuildNum(i)
	return nuo
}

// SetEnvironmentID sets the "environment" edge to the Environment entity by ID.
func (nuo *NetworkUpdateOne) SetEnvironmentID(id int) *NetworkUpdateOne {
	nuo.mutation.SetEnvironmentID(id)
	return nuo
}

// SetNillableEnvironmentID sets the "environment" edge to the Environment entity by ID if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableEnvironmentID(id *int) *NetworkUpdateOne {
	if id != nil {
		nuo = nuo.SetEnvironmentID(*id)
	}
	return nuo
}

// SetEnvironment sets the "environment" edge to the Environment entity.
func (nuo *NetworkUpdateOne) SetEnvironment(e *Environment) *NetworkUpdateOne {
	return nuo.SetEnvironmentID(e.ID)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (nuo *NetworkUpdateOne) AddNodeIDs(ids ...int) *NetworkUpdateOne {
	nuo.mutation.AddNodeIDs(ids...)
	return nuo
}

// AddNodes adds the "nodes" edges to the Node entity.
func (nuo *NetworkUpdateOne) AddNodes(n ...*Node) *NetworkUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.AddNodeIDs(ids...)
}

// Mutation returns the NetworkMutation object of the builder.
func (nuo *NetworkUpdateOne) Mutation() *NetworkMutation {
	return nuo.mutation
}

// ClearEnvironment clears the "environment" edge to the Environment entity.
func (nuo *NetworkUpdateOne) ClearEnvironment() *NetworkUpdateOne {
	nuo.mutation.ClearEnvironment()
	return nuo
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (nuo *NetworkUpdateOne) ClearNodes() *NetworkUpdateOne {
	nuo.mutation.ClearNodes()
	return nuo
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (nuo *NetworkUpdateOne) RemoveNodeIDs(ids ...int) *NetworkUpdateOne {
	nuo.mutation.RemoveNodeIDs(ids...)
	return nuo
}

// RemoveNodes removes "nodes" edges to Node entities.
func (nuo *NetworkUpdateOne) RemoveNodes(n ...*Node) *NetworkUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.RemoveNodeIDs(ids...)
}

// Where appends a list predicates to the NetworkUpdate builder.
func (nuo *NetworkUpdateOne) Where(ps ...predicate.Network) *NetworkUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NetworkUpdateOne) Select(field string, fields ...string) *NetworkUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Network entity.
func (nuo *NetworkUpdateOne) Save(ctx context.Context) (*Network, error) {
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NetworkUpdateOne) SaveX(ctx context.Context) *Network {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NetworkUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NetworkUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nuo *NetworkUpdateOne) sqlSave(ctx context.Context) (_node *Network, err error) {
	_spec := sqlgraph.NewUpdateSpec(network.Table, network.Columns, sqlgraph.NewFieldSpec(network.FieldID, field.TypeInt))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Network.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, network.FieldID)
		for _, f := range fields {
			if !network.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != network.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.DeployTime(); ok {
		_spec.SetField(network.FieldDeployTime, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.GithubBuildNum(); ok {
		_spec.SetField(network.FieldGithubBuildNum, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedGithubBuildNum(); ok {
		_spec.AddField(network.FieldGithubBuildNum, field.TypeInt, value)
	}
	if nuo.mutation.EnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   network.EnvironmentTable,
			Columns: []string{network.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   network.EnvironmentTable,
			Columns: []string{network.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   network.NodesTable,
			Columns: []string{network.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNodesIDs(); len(nodes) > 0 && !nuo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   network.NodesTable,
			Columns: []string{network.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   network.NodesTable,
			Columns: []string{network.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Network{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{network.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
