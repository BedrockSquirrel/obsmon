// Code generated by ent, DO NOT EDIT.

package network

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/bedrocksquirrel/obsmon/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Network {
	return predicate.Network(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Network {
	return predicate.Network(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Network {
	return predicate.Network(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Network {
	return predicate.Network(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Network {
	return predicate.Network(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Network {
	return predicate.Network(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Network {
	return predicate.Network(sql.FieldLTE(FieldID, id))
}

// DeployTime applies equality check predicate on the "deployTime" field. It's identical to DeployTimeEQ.
func DeployTime(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldDeployTime, v))
}

// GithubBuildNum applies equality check predicate on the "githubBuildNum" field. It's identical to GithubBuildNumEQ.
func GithubBuildNum(v int) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldGithubBuildNum, v))
}

// DeployTimeEQ applies the EQ predicate on the "deployTime" field.
func DeployTimeEQ(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldDeployTime, v))
}

// DeployTimeNEQ applies the NEQ predicate on the "deployTime" field.
func DeployTimeNEQ(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldNEQ(FieldDeployTime, v))
}

// DeployTimeIn applies the In predicate on the "deployTime" field.
func DeployTimeIn(vs ...time.Time) predicate.Network {
	return predicate.Network(sql.FieldIn(FieldDeployTime, vs...))
}

// DeployTimeNotIn applies the NotIn predicate on the "deployTime" field.
func DeployTimeNotIn(vs ...time.Time) predicate.Network {
	return predicate.Network(sql.FieldNotIn(FieldDeployTime, vs...))
}

// DeployTimeGT applies the GT predicate on the "deployTime" field.
func DeployTimeGT(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldGT(FieldDeployTime, v))
}

// DeployTimeGTE applies the GTE predicate on the "deployTime" field.
func DeployTimeGTE(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldGTE(FieldDeployTime, v))
}

// DeployTimeLT applies the LT predicate on the "deployTime" field.
func DeployTimeLT(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldLT(FieldDeployTime, v))
}

// DeployTimeLTE applies the LTE predicate on the "deployTime" field.
func DeployTimeLTE(v time.Time) predicate.Network {
	return predicate.Network(sql.FieldLTE(FieldDeployTime, v))
}

// GithubBuildNumEQ applies the EQ predicate on the "githubBuildNum" field.
func GithubBuildNumEQ(v int) predicate.Network {
	return predicate.Network(sql.FieldEQ(FieldGithubBuildNum, v))
}

// GithubBuildNumNEQ applies the NEQ predicate on the "githubBuildNum" field.
func GithubBuildNumNEQ(v int) predicate.Network {
	return predicate.Network(sql.FieldNEQ(FieldGithubBuildNum, v))
}

// GithubBuildNumIn applies the In predicate on the "githubBuildNum" field.
func GithubBuildNumIn(vs ...int) predicate.Network {
	return predicate.Network(sql.FieldIn(FieldGithubBuildNum, vs...))
}

// GithubBuildNumNotIn applies the NotIn predicate on the "githubBuildNum" field.
func GithubBuildNumNotIn(vs ...int) predicate.Network {
	return predicate.Network(sql.FieldNotIn(FieldGithubBuildNum, vs...))
}

// GithubBuildNumGT applies the GT predicate on the "githubBuildNum" field.
func GithubBuildNumGT(v int) predicate.Network {
	return predicate.Network(sql.FieldGT(FieldGithubBuildNum, v))
}

// GithubBuildNumGTE applies the GTE predicate on the "githubBuildNum" field.
func GithubBuildNumGTE(v int) predicate.Network {
	return predicate.Network(sql.FieldGTE(FieldGithubBuildNum, v))
}

// GithubBuildNumLT applies the LT predicate on the "githubBuildNum" field.
func GithubBuildNumLT(v int) predicate.Network {
	return predicate.Network(sql.FieldLT(FieldGithubBuildNum, v))
}

// GithubBuildNumLTE applies the LTE predicate on the "githubBuildNum" field.
func GithubBuildNumLTE(v int) predicate.Network {
	return predicate.Network(sql.FieldLTE(FieldGithubBuildNum, v))
}

// HasEnvironment applies the HasEdge predicate on the "environment" edge.
func HasEnvironment() predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnvironmentTable, EnvironmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentWith applies the HasEdge predicate on the "environment" edge with a given conditions (other predicates).
func HasEnvironmentWith(preds ...predicate.Environment) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		step := newEnvironmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNodes applies the HasEdge predicate on the "nodes" edge.
func HasNodes() predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NodesTable, NodesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodesWith applies the HasEdge predicate on the "nodes" edge with a given conditions (other predicates).
func HasNodesWith(preds ...predicate.Node) predicate.Network {
	return predicate.Network(func(s *sql.Selector) {
		step := newNodesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Network) predicate.Network {
	return predicate.Network(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Network) predicate.Network {
	return predicate.Network(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Network) predicate.Network {
	return predicate.Network(sql.NotPredicates(p))
}
