// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bedrocksquirrel/obsmon/ent/environment"
	"github.com/bedrocksquirrel/obsmon/ent/network"
)

// Network is the model entity for the Network schema.
type Network struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DeployTime holds the value of the "deployTime" field.
	DeployTime time.Time `json:"deployTime,omitempty"`
	// GithubBuildNum holds the value of the "githubBuildNum" field.
	GithubBuildNum int `json:"githubBuildNum,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NetworkQuery when eager-loading is set.
	Edges                NetworkEdges `json:"edges"`
	environment_networks *int
	selectValues         sql.SelectValues
}

// NetworkEdges holds the relations/edges for other nodes in the graph.
type NetworkEdges struct {
	// Environment holds the value of the environment edge.
	Environment *Environment `json:"environment,omitempty"`
	// Nodes holds the value of the nodes edge.
	Nodes []*Node `json:"nodes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EnvironmentOrErr returns the Environment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NetworkEdges) EnvironmentOrErr() (*Environment, error) {
	if e.loadedTypes[0] {
		if e.Environment == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: environment.Label}
		}
		return e.Environment, nil
	}
	return nil, &NotLoadedError{edge: "environment"}
}

// NodesOrErr returns the Nodes value or an error if the edge
// was not loaded in eager-loading.
func (e NetworkEdges) NodesOrErr() ([]*Node, error) {
	if e.loadedTypes[1] {
		return e.Nodes, nil
	}
	return nil, &NotLoadedError{edge: "nodes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Network) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case network.FieldID, network.FieldGithubBuildNum:
			values[i] = new(sql.NullInt64)
		case network.FieldDeployTime:
			values[i] = new(sql.NullTime)
		case network.ForeignKeys[0]: // environment_networks
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Network fields.
func (n *Network) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case network.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int(value.Int64)
		case network.FieldDeployTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deployTime", values[i])
			} else if value.Valid {
				n.DeployTime = value.Time
			}
		case network.FieldGithubBuildNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field githubBuildNum", values[i])
			} else if value.Valid {
				n.GithubBuildNum = int(value.Int64)
			}
		case network.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field environment_networks", value)
			} else if value.Valid {
				n.environment_networks = new(int)
				*n.environment_networks = int(value.Int64)
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Network.
// This includes values selected through modifiers, order, etc.
func (n *Network) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// QueryEnvironment queries the "environment" edge of the Network entity.
func (n *Network) QueryEnvironment() *EnvironmentQuery {
	return NewNetworkClient(n.config).QueryEnvironment(n)
}

// QueryNodes queries the "nodes" edge of the Network entity.
func (n *Network) QueryNodes() *NodeQuery {
	return NewNetworkClient(n.config).QueryNodes(n)
}

// Update returns a builder for updating this Network.
// Note that you need to call Network.Unwrap() before calling this method if this Network
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Network) Update() *NetworkUpdateOne {
	return NewNetworkClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Network entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Network) Unwrap() *Network {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Network is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Network) String() string {
	var builder strings.Builder
	builder.WriteString("Network(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("deployTime=")
	builder.WriteString(n.DeployTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("githubBuildNum=")
	builder.WriteString(fmt.Sprintf("%v", n.GithubBuildNum))
	builder.WriteByte(')')
	return builder.String()
}

// Networks is a parsable slice of Network.
type Networks []*Network
